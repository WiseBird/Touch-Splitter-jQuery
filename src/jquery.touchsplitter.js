// Generated by CoffeeScript 1.6.3
/*
# Touch Splitter JQuery was created by Cole Lawrence(github:ZombieHippie)
# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0
# Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/.
*/

var TouchSplitter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$.fn.horizontalSplit = function() {
  if (this.children().length !== 2 && this.children().length !== 0) {
    throw "Cannot make a splitter here! Incorrect number of div children in " + this;
  }
  this.addClass('TouchSplitter hTS');
  return new TouchSplitter(this, true);
};

$.fn.verticalSplit = function() {
  var childs;
  childs = this.children().length;
  if (childs !== 2 && childs !== 0) {
    throw "Cannot make a splitter here! Incorrect number of div children in " + this;
  }
  this.addClass('TouchSplitter vTS');
  return new TouchSplitter(this, false);
};

TouchSplitter = (function() {
  function TouchSplitter(element, horizontal) {
    var firstdiv;
    this.element = element;
    this.horizontal = horizontal;
    this.onResize = __bind(this.onResize, this);
    this.getSecond = __bind(this.getSecond, this);
    this.getFirst = __bind(this.getFirst, this);
    this.touchMove = __bind(this.touchMove, this);
    this.touchStart = __bind(this.touchStart, this);
    this.stopDragging = __bind(this.stopDragging, this);
    this.drag = __bind(this.drag, this);
    this.startDragging = __bind(this.startDragging, this);
    this.setupMouseEvents = __bind(this.setupMouseEvents, this);
    this.setPercentages = __bind(this.setPercentages, this);
    this.splitDist = __bind(this.splitDist, this);
    firstdiv = this.element.find(">div:first");
    if (firstdiv.length === 0) {
      this.element.append("        <div></div>        <div class=\"splitter-bar\"></div>        <div></div>");
    } else {
      firstdiv.after("<div class=\"splitter-bar\"></div>");
    }
    this.barThicknessPx = 10;
    this.barThickness = .04;
    this.barPosition = 0.5;
    this.barPositionMin = this.min / this.element.width();
    this.barPositionMax = this.max / this.element.width();
    this.dragging = false;
    this.docked = false;
    this.initMouse = 0;
    this.initBarPosition = 0;
    this.onResize();
    this.element.on('resize', this.onResize);
    this.setupMouseEvents();
    this.setPercentages();
  }

  TouchSplitter.prototype.splitDist = function() {
    if (this.horizontal) {
      return this.element.width();
    }
    return this.element.height();
  };

  TouchSplitter.prototype.setPercentages = function() {
    var attr, e, first, second;
    first = this.barPosition - this.barThickness;
    second = 1 - this.barPosition - this.barThickness;
    console.log(first + " " + this.barPosition);
    attr = this.horizontal ? "width" : "height";
    this.getFirst().css(attr, (100 * first) + "%");
    this.getSecond().css(attr, (100 * second) + "%");
    e = jQuery.Event("resize", {
      horizontal: this.horizontal
    });
    this.getFirst().trigger("resize");
    return this.getSecond().trigger("resize");
  };

  TouchSplitter.prototype.setupMouseEvents = function() {
    $(window).on('mousemove', this.drag);
    this.element.find('.splitter-bar').on('mousedown', this.startDragging);
    this.element.find('.splitter-bar').on('touchstart', this.touchStart);
    return this.element.find('.splitter-bar').on('touchmove', this.touchMove);
  };

  TouchSplitter.prototype.startDragging = function(event) {
    this.initMouse = this.horizontal ? event.clientX : event.clientY;
    this.dragging = true;
    this.initBarPosition = this.barPosition;
    return event.preventDefault();
  };

  TouchSplitter.prototype.drag = function(event) {
    var client, whichM;
    if (!this.dragging) {
      return;
    }
    whichM = typeof event.buttons !== 'undefined' ? event.buttons : event.which;
    if (whichM === 0) {
      this.stopDragging();
    }
    client = this.horizontal ? event.clientX : event.clientY;
    this.barPosition = this.initBarPosition + (client - this.initMouse) / this.splitDist();
    return this.setPercentages();
  };

  TouchSplitter.prototype.stopDragging = function(event) {
    return this.dragging = false;
  };

  TouchSplitter.prototype.touchStart = function(event) {
    var orig;
    orig = event.originalEvent;
    this.initMouse = this.horizontal ? orig.changedTouches[0].pageX : orig.changedTouches[0].pageY;
    return this.initBarPosition = this.barPosition;
  };

  TouchSplitter.prototype.touchMove = function(event) {
    var orig, page;
    event.preventDefault();
    orig = event.originalEvent;
    page = this.horizontal ? orig.changedTouches[0].pageX : orig.changedTouches[0].pageY;
    return this.barPosition = this.initBarPosition + (page - this.initMouse) / this.splitDist;
  };

  TouchSplitter.prototype.getFirst = function() {
    return this.element.find('>div:first');
  };

  TouchSplitter.prototype.getSecond = function() {
    return this.element.find('>div:last');
  };

  TouchSplitter.prototype.onResize = function(event) {
    var attr;
    if (event == null) {
      event = null;
    }
    if (event !== null) {
      event.stopPropagation();
      if (!$(event.target).is(this.element)) {
        return;
      }
    }
    this.barThickness = this.barThicknessPx / this.splitDist();
    attr = this.horizontal ? "width" : "height";
    this.element.find('>.splitter-bar').css(attr, this.barThickness * 200 + '%');
    this.barPositionMin = this.min / this.splitDist;
    this.barPositionMax = this.max / this.splitDist;
    return this.setPercentages();
  };

  return TouchSplitter;

})();
