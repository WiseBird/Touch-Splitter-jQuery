// Generated by CoffeeScript 1.6.3
var TouchSplitter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TouchSplitter = (function() {
  function TouchSplitter(id, min, init, max) {
    this.id = id;
    this.min = min;
    this.max = max;
    this.update = __bind(this.update, this);
    this.onResize = __bind(this.onResize, this);
    this.toggleFullscreen = __bind(this.toggleFullscreen, this);
    this.setBarPosition = __bind(this.setBarPosition, this);
    this.touchMove = __bind(this.touchMove, this);
    this.touchStart = __bind(this.touchStart, this);
    this.stopDragging = __bind(this.stopDragging, this);
    this.drag = __bind(this.drag, this);
    this.startDragging = __bind(this.startDragging, this);
    this.undock = __bind(this.undock, this);
    this.dock = __bind(this.dock, this);
    this.toggleDock = __bind(this.toggleDock, this);
    this.setupMouseEvents = __bind(this.setupMouseEvents, this);
    this.barWidth = 5;
    this.barPosition = 0.3;
    this.barPositionMin = this.min / $('#' + this.id).width();
    this.barPositionMax = this.max / $('#' + this.id).width();
    this.lastOpenPos = init;
    this.dragging = false;
    this.docked = false;
    this.initMouseX = 0;
    this.initBarPosition = 0;
    this.splitWidth = 0;
    this.fullsreen = false;
    this.onResize();
    $(window).on('resize', this.onResize);
    $('#' + this.id).addClass('hsplit');
    this.setupMouseEvents();
  }

  TouchSplitter.prototype.setupMouseEvents = function() {
    $('#' + this.id + ' #splitter-bar').on('mousedown', this.startDragging);
    $('#' + this.id).on('mouseleave', this.stopDragging);
    $('#' + this.id).on('mousemove', this.drag);
    $('#' + this.id).on('click', '#splitter-bar #toggle', this.toggleDock);
    $('#' + this.id + ' #splitter-bar').on('touchstart', this.touchStart);
    return $('#' + this.id + ' #splitter-bar').on('touchmove', this.touchMove);
  };

  TouchSplitter.prototype.toggleDock = function() {
    if (this.docked) {
      this.undock();
    } else {
      this.dock();
    }
    return this.dragging = false;
  };

  TouchSplitter.prototype.dock = function() {
    this.lastOpenPos = this.barPosition;
    this.barPosition = 0;
    this.getLeft().hide();
    this.docked = true;
    return this.update();
  };

  TouchSplitter.prototype.undock = function() {
    this.barPosition = this.lastOpenPos;
    this.getLeft().show();
    this.docked = false;
    this.update();
    return $(window).resize();
  };

  TouchSplitter.prototype.startDragging = function(event) {
    this.dragging = true;
    this.initMouseX = event.clientX;
    this.initBarPosition = this.barPosition;
    return event.preventDefault();
  };

  TouchSplitter.prototype.drag = function(event) {
    var whichM;
    if (!this.dragging) {
      return;
    }
    whichM = typeof event.buttons !== 'undefined' ? event.buttons : event.which;
    if (whichM === 0) {
      this.stopDragging();
    }
    return this.setBarPosition(this.initBarPosition + (event.clientX - this.initMouseX) / this.splitWidth);
  };

  TouchSplitter.prototype.stopDragging = function(event) {
    this.dragging = false;
    return $('#file-manager').resize();
  };

  TouchSplitter.prototype.touchStart = function(event) {
    var orig;
    orig = event.originalEvent;
    this.initMouseX = orig.changedTouches[0].pageX;
    return this.initBarPosition = this.barPosition;
  };

  TouchSplitter.prototype.touchMove = function(event) {
    var orig;
    event.preventDefault();
    orig = event.originalEvent;
    return this.setBarPosition(this.initBarPosition + (orig.changedTouches[0].pageX - this.initMouseX) / this.splitWidth);
  };

  TouchSplitter.prototype.getLeft = function() {
    return $('#' + this.id + '>div:first');
  };

  TouchSplitter.prototype.getRight = function() {
    return $('#' + this.id + '>div:last');
  };

  TouchSplitter.prototype.setBarPosition = function(pos) {
    if (this.docked) {
      if (pos > this.barPositionMin / 2) {
        this.lastOpenPos = this.barPositionMin;
        return this.undock();
      }
    } else {
      if (pos < this.barPositionMin / 2) {
        return this.dock();
      }
    }
    if (pos < this.barPositionMin && !this.docked) {
      pos = this.barPositionMin;
    }
    if (pos > this.barPositionMax) {
      pos = this.barPositionMax;
    }
    if (pos < 0 || this.docked) {
      pos = 0;
    }
    this.barPosition = pos;
    return this.update();
  };

  TouchSplitter.prototype.toggleFullscreen = function() {
    var me;
    me = $('#' + this.id);
    if (!this.fullscreen) {
      me.addClass('hsplit-fullscreen');
      this.getRight().append('<div class="hsplit-toolbar">' + Touch('<img onclick="$(\'#fsave a\').click()" src="/static/editorLib/hippiesplitter/link-save.png" alt="Save File">' + '<img onclick="$(\'#fsnapshot a\').click()" src="/static/editorLib/hippiesplitter/link-snapshot.png" alt="Snapshot">' + '<img onclick="$(\'#selected-app .menu a:last\').click()" src="/static/editorLib/hippiesplitter/link-settings.png" alt="Settings"></div>'));
    } else {
      me.removeClass('hsplit-fullscreen');
      this.getRight().find('.hsplit-toolbar').remove();
    }
    this.fullscreen = !this.fullscreen;
    $(window).resize();
    return this.fullscreen;
  };

  TouchSplitter.prototype.onResize = function() {
    this.splitWidth = $('#' + this.id).width();
    this.barWidth = 12 / this.splitWidth * 100;
    $('#' + this.id + ' #splitter-bar').width(this.barWidth * 2 + '%');
    this.barPositionMin = this.min / this.splitWidth;
    this.barPositionMax = this.max / this.splitWidth;
    return this.update();
  };

  TouchSplitter.prototype.update = function() {
    var percLeft, percRight;
    percLeft = this.barPosition * 100;
    percRight = 100 - percLeft;
    percRight -= this.barWidth * 2;
    this.getLeft().width(percLeft + '%');
    this.getRight().width(percRight + '%');
    return $('#' + this.id + '>#splitter-bar').css({
      'left': percLeft + '%'
    });
  };

  return TouchSplitter;

})();
