// Generated by CoffeeScript 1.6.3
/*
# Touch Splitter JQuery was created by Cole Lawrence(github:ZombieHippie)
# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0
# Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/.
*/

var TouchSplitter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$.fn.touchSplit = function(options) {
  if (options == null) {
    options = {};
  }
  if (this.children().length !== 2 && this.children().length !== 0) {
    throw "Cannot make a splitter here! Incorrect number of div children in " + this;
  }
  return new TouchSplitter(this, options);
};

TouchSplitter = (function() {
  function TouchSplitter(element, options) {
    var firstdiv;
    this.element = element;
    this.resize = __bind(this.resize, this);
    this.onResize = __bind(this.onResize, this);
    this.onResizeWindow = __bind(this.onResizeWindow, this);
    this.getSecond = __bind(this.getSecond, this);
    this.getFirst = __bind(this.getFirst, this);
    this.stopDragging = __bind(this.stopDragging, this);
    this.drag = __bind(this.drag, this);
    this.startDragging = __bind(this.startDragging, this);
    this.onTouchEnd = __bind(this.onTouchEnd, this);
    this.onTouchMove = __bind(this.onTouchMove, this);
    this.onTouchStart = __bind(this.onTouchStart, this);
    this.onMouseDown = __bind(this.onMouseDown, this);
    this.setPercentages = __bind(this.setPercentages, this);
    this.moveBar = __bind(this.moveBar, this);
    this.on = __bind(this.on, this);
    this.toggleDock = __bind(this.toggleDock, this);
    this.calcBounds = __bind(this.calcBounds, this);
    this.splitDist = __bind(this.splitDist, this);
    if (options.orientation != null) {
      if (options.orientation === "vertical") {
        this.horizontal = false;
      } else if (options.orientation === "horizontal") {
        this.horizontal = true;
      } else {
        console.log("Touch Splitter ERROR: orientation cannot be:'" + options.orientation + "' defaulted to 'horizontal'");
      }
    } else {
      this.horizontal = true;
    }
    this.element.addClass('TouchSplitter ' + (this.horizontal ? "hTS" : "vTS"));
    this.firstMin = options.leftMin || options.topMin || options.firstMin || 0;
    this.firstMax = options.leftMax || options.topMax || options.firstMax || 0;
    this.secondMin = options.rightMin || options.bottomMin || options.secondMin || 0;
    this.secondMax = options.rightMax || options.bottomMax || options.secondMax || 0;
    this.isFirstBounded = this.firstMin === 0 && this.firstMax === 0 ? false : true;
    this.isSecondBounded = this.secondMin === 0 && this.secondMax === 0 ? false : true;
    this.calcBounds();
    if (this.firstMax && this.secondMax) {
      console.log("Touch Splitter ERROR: cannot set max bounds all sections!");
      this.secondMax = 0;
    }
    firstdiv = this.element.find(">div:first");
    if (firstdiv.length === 0) {
      this.element.append("        <div></div>        <div class=\"splitter-bar\"><div></div></div>        <div></div>");
    } else {
      firstdiv.after("<div class=\"splitter-bar\"><div></div></div>");
    }
    this.barThicknessPx = options.barWidth || 10;
    this.barThickness = .04;
    this.barPosition = 0.5;
    this.dragging = false;
    this.initMouse = 0;
    this.initBarPosition = 0;
    if (options.dock != null) {
      if (options.dock === "left" || options.dock === "top" || options.dock === "first") {
        this.element.find('>.splitter-bar').addClass('dock first');
        this.dockFirst = true;
      } else if (options.dock === "right" || options.dock === "bottom" || options.dock === "second") {
        this.element.find('>.splitter-bar').addClass('dock second');
        this.dockFirst = false;
      } else {
        console.log("Touch Splitter ERROR: option{dock:'" + options.dock + "'} invalid!");
      }
    }
    if (this.dockFirst != null) {
      this.element.find('>.splitter-bar').on('click', this.toggleDock);
    }
    this.onResize();
    this.element.on('resize', this.onResize);
    $(window).on('resize', this.onResizeWindow);
    $(window).on('mousemove', this.drag);
    this.element.find('>.splitter-bar').on('mousedown', this.onMouseDown);
    this.element.find('>.splitter-bar').bind('touchstart', this.onTouchStart);
    this.element.on('touchmove', this.onTouchMove);
    this.element.on('touchend', this.onTouchEnd);
    this.element.on('touchleave', this.onTouchEnd);
    this.element.on('touchcancel', this.onTouchEnd);
    this.setPercentages();
  }

  TouchSplitter.prototype.splitDist = function() {
    if (this.horizontal) {
      return this.element.width();
    }
    return this.element.height();
  };

  TouchSplitter.prototype.calcBounds = function() {
    var conv, val, _ref;
    _ref = {
      firstMin: this.firstMin,
      firstMax: this.firstMax,
      secondMin: this.secondMin,
      secondMax: this.secondMax
    };
    for (conv in _ref) {
      val = _ref[conv];
      this[conv + 'Ratio'] = val / this.splitDist();
    }
    if (this.barPosition > this.firstMaxRatio + this.barThickness && this.firstMaxRatio) {
      this.barPosition = this.firstMaxRatio;
      this.setPercentages();
    }
    if (this.barPosition > this.firstMaxRatio && this.firstMaxRatio) {
      this.barPosition = this.firstMaxRatio;
      return this.setPercentages();
    }
  };

  TouchSplitter.prototype.toggleDock = function(event) {
    if (!this.docked) {
      this.barPosition = this.dockFirst ? 0 : 1;
      return this.setPercentages();
    }
  };

  TouchSplitter.prototype.on = function(eventName, fn) {
    return this.element.on(eventName, fn);
  };

  TouchSplitter.prototype.moveBar = function(newX) {
    var cursorPos;
    cursorPos = this.initBarPosition + (newX - this.initMouse) / this.splitDist();
    if (this.isFirstBounded) {
      this.barPosition = (function() {
        switch (false) {
          case !(cursorPos > this.firstMaxRatio):
            return this.firstMaxRatio;
          case !(cursorPos < this.firstMinRatio):
            return this.firstMinRatio;
          default:
            return cursorPos;
        }
      }).call(this);
    } else if (this.isSecondBounded) {
      this.barPosition = (function() {
        switch (false) {
          case !(cursorPos > this.secondMaxRatio):
            return this.secondMaxRatio;
          case !(cursorPos < this.secondMinRatio):
            return this.secondMinRatio;
          default:
            return cursorPos;
        }
      }).call(this);
    } else {
      this.barPosition = cursorPos;
    }
    console.log(this.barPosition, this.firstMaxRatio);
    return this.setPercentages();
  };

  TouchSplitter.prototype.setPercentages = function() {
    var attr, e, first, second;
    if (this.barPosition < this.barThickness) {
      this.barPosition = this.barThickness;
    }
    if (this.barPosition > 1 - this.barThickness) {
      this.barPosition = 1 - this.barThickness;
    }
    first = this.barPosition - this.barThickness;
    second = 1 - this.barPosition - this.barThickness;
    attr = this.horizontal ? "width" : "height";
    this.getFirst().css(attr, (100 * first) + "%");
    this.getSecond().css(attr, (100 * second) + "%");
    e = jQuery.Event("resize", {
      horizontal: this.horizontal
    });
    this.getFirst().trigger("resize");
    return this.getSecond().trigger("resize");
  };

  TouchSplitter.prototype.onMouseDown = function(event) {
    event.preventDefault();
    this.initMouse = this.horizontal ? event.clientX : event.clientY;
    return this.startDragging(event);
  };

  TouchSplitter.prototype.onTouchStart = function(event) {
    var orig;
    orig = event.originalEvent;
    this.initMouse = this.horizontal ? orig.changedTouches[0].pageX : orig.changedTouches[0].pageY;
    return this.startDragging(event);
  };

  TouchSplitter.prototype.onTouchMove = function(event) {
    var orig, page;
    if (!this.dragging) {
      return;
    }
    event.preventDefault();
    orig = event.originalEvent;
    page = this.horizontal ? orig.changedTouches[0].pageX : orig.changedTouches[0].pageY;
    return this.moveBar(page);
  };

  TouchSplitter.prototype.onTouchEnd = function(event) {
    return this.stopDragging(event);
  };

  TouchSplitter.prototype.startDragging = function(event) {
    this.initBarPosition = this.barPosition;
    this.dragging = true;
    return this.element.trigger("dragstart");
  };

  TouchSplitter.prototype.drag = function(event) {
    var client, whichM;
    if (!this.dragging) {
      return;
    }
    whichM = typeof event.buttons !== 'undefined' ? event.buttons : event.which;
    if (whichM === 0) {
      this.stopDragging();
    }
    client = this.horizontal ? event.clientX : event.clientY;
    return this.moveBar(client);
  };

  TouchSplitter.prototype.stopDragging = function(event) {
    if (this.dragging) {
      this.dragging = false;
      return this.element.trigger("dragstop");
    }
  };

  TouchSplitter.prototype.getFirst = function() {
    return this.element.find('>div:first');
  };

  TouchSplitter.prototype.getSecond = function() {
    return this.element.find('>div:last');
  };

  TouchSplitter.prototype.onResizeWindow = function(event) {
    if (event == null) {
      event = null;
    }
    return this.resize();
  };

  TouchSplitter.prototype.onResize = function(event) {
    if (event == null) {
      event = null;
    }
    if (event !== null) {
      event.stopPropagation();
      if (!$(event.target).is(this.element)) {
        return;
      }
    }
    return this.resize();
  };

  TouchSplitter.prototype.resize = function() {
    var attr;
    this.barThickness = this.barThicknessPx / this.splitDist();
    this.calcBounds();
    if (this.barThickness > 1) {
      this.barThickness = 1;
    }
    attr = this.horizontal ? "width" : "height";
    this.element.find('>.splitter-bar').css(attr, this.barThickness * 200 + '%');
    return this.setPercentages();
  };

  return TouchSplitter;

})();
